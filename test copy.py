import requests
import logging
import os
import json

# Setup logging
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")

# Define the prompt for testing
PROMPT = """
Write a detailed and engaging blog post about the importance of AI in modern society.
Focus on its applications in healthcare, education, and business.
Include examples of how it is transforming these industries and its potential for future innovations.
"""

# Define the server URL
SERVER_URL = "http://127.0.0.1:5000/generate"

# Define the output directory
OUTPUT_DIR = "output"

def generate_blog(prompt, max_length=1000, temperature=0.7, top_p=0.9, num_return_sequences=1):
    """
    Send a request to the server to generate a blog post.
    """
    try:
        logging.info(f"Sending prompt to the server: {prompt[:50]}...")
        payload = {
            "prompt": prompt,
            "max_length": max_length,
            "temperature": temperature,
            "top_p": top_p,
            "num_return_sequences": num_return_sequences,
        }
        response = requests.post(
            SERVER_URL,
            json=payload,
            timeout=180  # Increased timeout for long generations
        )
        response.raise_for_status()
        generated_text = response.json().get("text", "")
        if not generated_text.strip():
            raise ValueError("Empty text generated by the model.")
        logging.info("Received response from the server.")
        return generated_text
    except requests.exceptions.RequestException as e:
        logging.error(f"Error communicating with the model server: {e}")
        return None
    except json.JSONDecodeError as e:
        logging.error(f"Invalid JSON response from the server: {e}")
        return None
    except ValueError as e:
        logging.error(f"Validation error: {e}")
        return None

def save_blog(content, file_name="blog_test.txt"):
    """
    Save the generated blog post to a file.
    """
    try:
        os.makedirs(OUTPUT_DIR, exist_ok=True)
        file_path = os.path.join(OUTPUT_DIR, file_name)
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(content)
        logging.info(f"Blog saved to: {file_path}")
    except Exception as e:
        logging.error(f"Error saving blog to file: {e}")

if __name__ == "__main__":
    logging.info("Starting blog generation test.")
    blog_content = generate_blog(
        PROMPT,
        max_length=1000,
        temperature=0.7,
        top_p=0.9,
        num_return_sequences=1
    )
    if blog_content:
        logging.info("Blog content successfully generated.")
        print("\n--- Generated Blog ---\n")
        print(blog_content)
        print("\n--- End of Blog ---\n")
        save_blog(blog_content)
    else:
        logging.error("Failed to generate blog content.")
